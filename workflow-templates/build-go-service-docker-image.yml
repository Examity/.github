name: build go service docker image

on: [push]

env:
  #ARTIFACTCLASS: lobbylink
  DOCKER_BUILDKIT: 1
  
jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: 'stable'

      - run: go version
      
      - name: Set outputs
        id: vars
        run: |
          echo "ARTIFACTSHORTBUILDTAG=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          #echo "GOVERSION=$( curl -s https://go.dev/dl/?mode=json | jq --raw-output .[0].version | awk -F\"go\" '{ print $2 }' )" >> $GITHUB_OUTPUT

      - name: Check outputs
        run: |
          env | sort
          echo "------"
          echo ${{ steps.vars.outputs.ARTIFACTSHORTBUILDTAG }}
          #echo ${{ steps.vars.outputs.GOVERSION }}
          
      - name: test
        run: |
          go version
          git config --global url."https://git:${{ secrets.GH_PAT }}@github.com".insteadOf "https://github.com"
          go mod download
          #go get -t -u -x -v github.com/t-yuki/gocover-cobertura
          #go get -t -u -x -v github.com/jstemmer/go-junit-report
          go install github.com/t-yuki/gocover-cobertura@latest
          go install github.com/jstemmer/go-junit-report@latest
          #cd internal/utils
          #go test -v | ~/go/bin/go-junit-report > ../../test-output.xml
          go test ./... -v | ~/go/bin/go-junit-report > test-output.xml
          go test ./... -coverprofile=coverage.txt -covermode count github.com/gorilla/mux
          ~/go/bin/gocover-cobertura < coverage.txt > cobertura_coverage.xml
  
      - name: docker build
        run: |
          docker build -f Dockerfile --build-arg GH_PAT=${{ secrets.GH_PAT }} -t lobbylink:${{ steps.vars.outputs.ARTIFACTSHORTBUILDTAG }} .

      - name: Push Image to ECR
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.BUILDACCESSKEYID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.BUILDSECRETACCESSKEY }}
          export AWS_DEFAULT_REGION=${{ secrets.BUILDDEFAULTREGION }}
          echo "--- login --"
          aws ecr get-login-password --region ${{ secrets.BUILDDEFAULTREGION }} | docker login --username AWS --password-stdin ${{ secrets.BUILDECR }}
          echo "--- tag --"
          docker images -a
          docker tag ${ARTIFACTCLASS}:${{ steps.vars.outputs.ARTIFACTSHORTBUILDTAG }} ${{ secrets.BUILDECR }}/b_${ARTIFACTCLASS}:${{ steps.vars.outputs.ARTIFACTSHORTBUILDTAG }}
          docker images -a
          echo "--- push --"
          docker push ${{ secrets.BUILDECR }}/b_${ARTIFACTCLASS}:${{ steps.vars.outputs.ARTIFACTSHORTBUILDTAG }}

      - run: echo ${{ steps.vars.outputs.ARTIFACTSHORTBUILDTAG }} > build.txt

      - uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: build.txt
